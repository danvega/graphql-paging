# Root Operation Types
type Query {
    allPeople: [Person]
    allPeoplePaged(page: Int, size: Int): [PersonConnection]
}

# Object Types
type Person implements Node {
    id: ID!
    firstName: String
    lastName: String
    phoneNumber: String
    email: String
    address: Address
}

type Address implements Node {
    id: ID!
    address: String
    city: String
    state: String
    zip: String
}

type PageInfo {
    perPage: Int!
    currentPage: Int!
    totalPages: Int!
    totalItems: Int!
    hasPreviousPage: Boolean!
    hasNextPage: Boolean!
    isFirst: Boolean!
    isLast: Boolean!
}

type PersonConnection implements NodeConnection {
    totalCount: Int!
    pageInfo: PageInfo!
    edges: [PersonEdge]
}

type PersonEdge implements NodeConnectionEdge {
    node: Person
    next: Person
    previous: Person
}


# Interfaces

interface Node {
    id: ID!
}

interface NodeConnection {
    totalCount: Int!
    pageInfo: PageInfo!
    edges: [NodeConnectionEdge]
}

interface NodeConnectionEdge {
    node: Node
    next: Node
    previous: Node
}

